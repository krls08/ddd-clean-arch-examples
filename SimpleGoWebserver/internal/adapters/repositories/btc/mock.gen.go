// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package btcrepositories

import (
	"github.com/F0rzend/SimpleGoWebserver/internal/domain"
	"sync"
)

// Ensure, that MockBTCRepository does implement domain.BTCRepository.
// If this is not the case, regenerate this file with moq.
var _ domain.BTCRepository = &MockBTCRepository{}

// MockBTCRepository is a mock implementation of domain.BTCRepository.
//
// 	func TestSomethingThatUsesBTCRepository(t *testing.T) {
//
// 		// make and configure a mocked domain.BTCRepository
// 		mockedBTCRepository := &MockBTCRepository{
// 			GetFunc: func() domain.BTCPrice {
// 				panic("mock out the Get method")
// 			},
// 			SetPriceFunc: func(price domain.USD) error {
// 				panic("mock out the SetPrice method")
// 			},
// 		}
//
// 		// use mockedBTCRepository in code that requires domain.BTCRepository
// 		// and then make assertions.
//
// 	}
type MockBTCRepository struct {
	// GetFunc mocks the Get method.
	GetFunc func() domain.BTCPrice

	// SetPriceFunc mocks the SetPrice method.
	SetPriceFunc func(price domain.USD) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
		}
		// SetPrice holds details about calls to the SetPrice method.
		SetPrice []struct {
			// Price is the price argument value.
			Price domain.USD
		}
	}
	lockGet      sync.RWMutex
	lockSetPrice sync.RWMutex
}

// Get calls GetFunc.
func (mock *MockBTCRepository) Get() domain.BTCPrice {
	if mock.GetFunc == nil {
		panic("MockBTCRepository.GetFunc: method is nil but BTCRepository.Get was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc()
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedBTCRepository.GetCalls())
func (mock *MockBTCRepository) GetCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// SetPrice calls SetPriceFunc.
func (mock *MockBTCRepository) SetPrice(price domain.USD) error {
	if mock.SetPriceFunc == nil {
		panic("MockBTCRepository.SetPriceFunc: method is nil but BTCRepository.SetPrice was just called")
	}
	callInfo := struct {
		Price domain.USD
	}{
		Price: price,
	}
	mock.lockSetPrice.Lock()
	mock.calls.SetPrice = append(mock.calls.SetPrice, callInfo)
	mock.lockSetPrice.Unlock()
	return mock.SetPriceFunc(price)
}

// SetPriceCalls gets all the calls that were made to SetPrice.
// Check the length with:
//     len(mockedBTCRepository.SetPriceCalls())
func (mock *MockBTCRepository) SetPriceCalls() []struct {
	Price domain.USD
} {
	var calls []struct {
		Price domain.USD
	}
	mock.lockSetPrice.RLock()
	calls = mock.calls.SetPrice
	mock.lockSetPrice.RUnlock()
	return calls
}
